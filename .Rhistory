help(seq_len)
x <- 0
while (x > 10) {
if (x==10){
x <- x-1
}
}
install.packages("swirl")
search()
a <- search()
quarters()
weekdays()
weekdays(55554846)
Sys.time()
Sys.time()
weekdays(Sys.time())
quarters(Sys.time())
?strptime
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 1= 7
5!=7
5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints > 5)
which(ints > 7
which(ints > 7)
which(ints > 7)
any(ints)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
x
submit(x)
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}
submit ()
boring_function <- function(x) x
submit()
submit()
submit()
submit()
boring_function <- function(x) {
x
}
submit()
submit()
boring_function('My first function!')
boring_function
return(media)
media <- suma/length(my_vector)
my_mean <- function(my_vector) {
suma < c()
suma <- sum(my_vector)
media <- suma/length(my_vector)
}
submit()
meida <- sum(my_vector)/length(my_vector)
media <- sum(my_vector)/length(my_vector)
me/la
submit()
submit()
my_mean(c(4, 5, 10))
num %% divisor
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
func(dat)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
paste("START", ..., "STOP", sep = " ")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"I" %p% "love" %p% "R!
""
"I" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
?str
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
arg(lapply(list, function))
args(lapply)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
mean(x)
?str
str(apply)
str(lapply)
str(sapply)
args(apply)
?apply
args(quantile)
?quantile
?tapply
getwd()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
args(makeCacheMatrix)
x <- matrix(1:4, nrow = 2, ncol = 2)
makeCacheMatrix(x)
args(cacheSolve)
cacheSolve(x)
?str
summary(lm)
summary(lm())
str(lm)
str(plot)
summary(plot)
args(plot)
?plot
?gl
gl(40,10)
gl(2, 8, labels = c("Control", "Treat"))
?set.seed
?seed
args(set.seed)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
?rnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(1:100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7)
)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(0:1, size = 1, prob = 0.7)
flips2 <- rbinom(n = 10, size = 1, prob = 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm()
=rnorm
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
?log
library(Swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Anlysis")
swirl()
?impute.knn
?t
load("data/face.rda")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
showMethods(gray(10))
gray([0,1])
gray(0.5)
swirl()
names(par())
par("cex")
par("pch")
?pch
?pairs
setwd("C:/Users/Ricardo GutiÃ©rrez/OneDrive - Universidad de Los Andes/Coursera/5. Reproducible Research")
read.csv("activity.csv")
actividad <- as.data.frame(read.csv("activity.csv"))
actividad
str(actividad)
head(actividad)
View(actividad)
